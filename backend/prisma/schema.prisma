// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id
  email        String        @unique
  name         String
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  payments     Payment[]
  transactions Transaction[]
  sessions     Session[]
  cards        Cards[]
  recurrences  Recurrence[]
  bankAccounts BankAccount[]
}

model Session {
  id         String   @id
  userId     String
  tokenId    String
  content    String
  identifier String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id            String      @id
  userId        String
  bankAccountId String
  categoryId    Int
  amount        Decimal
  balance       Decimal
  description   String
  date          DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])
  payments      Payment[]
  Bank          Bank?       @relation(fields: [bankId], references: [id])
  bankId        Int?
}

model Recurrence {
  id            Int         @id
  userId        String
  bankAccountId String
  categoryId    Int
  amount        Decimal
  description   String
  date          DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])
  bankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
}

model Bank {
  id           Int           @id
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  cards        Cards[]
  bankAccounts BankAccount[]
}

model BankAccount {
  id           String        @id
  description  String?
  bankId       Int
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bank         Bank          @relation(fields: [bankId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  recurrences  Recurrence[]
  transactions Transaction[]
}

model Category {
  id           Int           @id
  description  String
  type         CategoryType  @default(CREDIT)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  recurrences  Recurrence[]
}

model PaymentMethod {
  id        Int       @id
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payments  Payment[]
}

model Payment {
  id              String        @id
  userId          String
  paymentMethodId Int
  transactionId   String
  cardId          String?
  amount          Decimal
  description     String
  date            DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  card            Cards?        @relation(fields: [cardId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  transaction     Transaction   @relation(fields: [transactionId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model Cards {
  id          String    @id
  userId      String
  name        String
  closingDay  DateTime
  type        CardType
  description String
  limit       Decimal
  bankId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  bank        Bank      @relation(fields: [bankId], references: [id])
  payments    Payment[]
}

enum CategoryType {
  DEBIT
  CREDIT
}

enum CardType {
  CREDIT
  DEBIT
}
